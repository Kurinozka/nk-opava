import { players } from '../src/playerData.js'
import fs from 'fs'

console.log('=== P≈òEPOƒåET OPAVSK√ùCH HR√Åƒå≈Æ S TR√âNINKOV√ùM BONUSEM ===\n')

// Funkce pro v√Ωpoƒçet v√°≈æen√© √∫spƒõ≈°nosti z re√°ln√Ωch v√Ωsledk≈Ø
function calculateWeightedWinRate(player) {
  if (!player.seasonStats || player.seasonStats.length === 0) return null

  // Seƒç√≠st v≈°echny z√°pasy a v√Ωhry z roku 2025 (vƒçetnƒõ play off/out)
  let wins2025 = 0
  let matches2025 = 0

  // Seƒç√≠st v≈°echny z√°pasy a v√Ωhry z roku 2024 (vƒçetnƒõ play off/out)
  let wins2024 = 0
  let matches2024 = 0

  for (const season of player.seasonStats) {
    if (season.season.includes('2025')) {
      wins2025 += season.wins
      matches2025 += season.matches
    } else if (season.season.includes('2024')) {
      wins2024 += season.wins
      matches2024 += season.matches
    }
  }

  // Pokud nem√°me ≈æ√°dn√° data, vr√°tit null
  if (matches2025 === 0 && matches2024 === 0) return null

  // Vypoƒç√≠tat √∫spƒõ≈°nost pro ka≈æd√Ω rok
  const winRate2025 = matches2025 > 0 ? (wins2025 / matches2025) * 100 : 0
  const winRate2024 = matches2024 > 0 ? (wins2024 / matches2024) * 100 : 0

  // V√°≈æen√° √∫spƒõ≈°nost z√°vis√≠ na poƒçtu z√°pas≈Ø v roce 2025
  let weightedWinRate
  if (matches2025 > 0 && matches2024 > 0) {
    // Pokud hr√°ƒç odehr√°l v 2025 alespo≈à 10 z√°pas≈Ø, pou≈æ√≠t dvojn√°sobnou v√°hu
    if (matches2025 >= 10) {
      // (winRate2025 * 2 + winRate2024) / 3
      weightedWinRate = (winRate2025 * 2 + winRate2024) / 3
    } else {
      // M√©nƒõ ne≈æ 10 z√°pas≈Ø v 2025 -> stejn√° v√°ha pro oba roky
      // (winRate2025 + winRate2024) / 2
      weightedWinRate = (winRate2025 + winRate2024) / 2
    }
  } else if (matches2025 > 0) {
    // Pouze data z 2025
    weightedWinRate = winRate2025
  } else {
    // Pouze data z 2024
    weightedWinRate = winRate2024
  }

  return weightedWinRate
}

// Funkce pro v√Ωpoƒçet z√°kladn√≠ho ratingu na z√°kladƒõ v√°≈æen√© √∫spƒõ≈°nosti
function calculateBaseRating(weightedWinRate, teamLeague = '1. liga') {
  // Z√°kladn√≠ rating podle ligy t√Ωmu (ne hr√°ƒçe!)
  // NK Opava hraje v 1. lize -> z√°kladn√≠ rating 80
  let baseRating
  if (teamLeague === 'Extraliga' || teamLeague.includes('Extraliga')) {
    baseRating = 85 // Extraliga
  } else if (teamLeague === '1. liga' || teamLeague.includes('1. liga')) {
    baseRating = 80 // Prvn√≠ liga
  } else {
    baseRating = 75 // Druh√° liga a n√≠≈æe
  }

  if (weightedWinRate === null) return baseRating // Defaultn√≠ hodnota

  if (weightedWinRate > 50) {
    // Zv√Ω≈°en√≠ o 1-15% podle √∫spƒõ≈°nosti nad 50%
    // 50.01% -> 1% zv√Ω≈°en√≠, 100% -> 15% zv√Ω≈°en√≠
    const increasePercent = 1 + ((weightedWinRate - 50) / 50) * 14
    return baseRating * (1 + increasePercent / 100)
  } else if (weightedWinRate < 50) {
    // Sn√≠≈æen√≠ o 1-15% podle √∫spƒõ≈°nosti pod 50%
    // 49.99% -> 1% sn√≠≈æen√≠, 0% -> 15% sn√≠≈æen√≠
    const decreasePercent = 1 + ((50 - weightedWinRate) / 50) * 14
    return baseRating * (1 - decreasePercent / 100)
  } else {
    // P≈ôesnƒõ 50% = ≈æ√°dn√° zmƒõna
    return baseRating
  }
}

// Pozice adjustments
function getPositionAdjustments(position) {
  const adjustments = {}

  if (position === 'Bloka≈ô/Smeƒça≈ô' || position === 'Smeƒça≈ô/Bloka≈ô') {
    adjustments.rychlost = 3
    adjustments.obratnost = 2
    adjustments.rana = 3
    adjustments.technika = -3
    adjustments.obrana = 2
    adjustments.cteniHry = -3
    adjustments.vydrz = -2
    adjustments.obetavost = -1
    adjustments.psychickaOdolnost = -1
  } else if (position === 'Nahravaƒç/Pola≈ô' || position === 'Pola≈ô/Nahravaƒç') {
    adjustments.technika = 3
    adjustments.cteniHry = 3
    adjustments.obrana = 2
    adjustments.rana = -3
    adjustments.rychlost = -2
    adjustments.obratnost = -1
    adjustments.vydrz = -2
    adjustments.obetavost = 0
    adjustments.psychickaOdolnost = 0
  } else if (position === 'Pola≈ô/Smeƒça≈ô' || position === 'Smeƒça≈ô/Pola≈ô') {
    adjustments.technika = 2
    adjustments.cteniHry = 2
    adjustments.obratnost = 2
    adjustments.rana = -2
    adjustments.rychlost = -1
    adjustments.obrana = 1
    adjustments.vydrz = -2
    adjustments.obetavost = -1
    adjustments.psychickaOdolnost = -1
  } else if (position === 'Univerz√°l') {
    adjustments.technika = 3
    adjustments.obrana = 3
    adjustments.cteniHry = 2
    adjustments.rana = -3
    adjustments.rychlost = -2
    adjustments.obratnost = -1
    adjustments.vydrz = -2
    adjustments.obetavost = 0
    adjustments.psychickaOdolnost = 0
  }

  return adjustments
}

// Funkce pro p≈ôid√°n√≠ tr√©ninkov√©ho bonusu
function applyTrainingBonus(stats, trainingAttendance) {
  if (!trainingAttendance || trainingAttendance === 0) {
    return stats // ≈Ω√°dn√Ω bonus
  }

  // Bonus podle doch√°zky:
  // 100% = +2 body ke v≈°em parametr≈Øm
  // 50% = +1 bod ke v≈°em parametr≈Øm
  // 25% = +0.5 bodu (zaokrouhleno)
  const bonusMultiplier = trainingAttendance / 50 // 100% -> 2, 50% -> 1, 25% -> 0.5

  const boostedStats = {}
  for (const [key, value] of Object.entries(stats)) {
    boostedStats[key] = Math.round(value + bonusMultiplier)
  }

  return boostedStats
}

let recalculated = 0

for (const player of players) {
  // P≈ôeskoƒçit tren√©ry
  if (!player.stats || player.position === 'Tren√©r') continue

  console.log(`\nüìä ${player.name} (${player.position})`)
  console.log(`   Doch√°zka na tr√©ninky: ${player.trainingAttendance2025 || 0}%`)

  const oldStats = { ...player.stats }
  const oldAvg = Object.values(oldStats).reduce((a, b) => a + b, 0) / 9

  // Spoƒç√≠tat celkov√Ω poƒçet z√°pas≈Ø v roce 2025
  let matches2025Total = 0
  if (player.seasonStats) {
    for (const season of player.seasonStats) {
      if (season.season.includes('2025')) {
        matches2025Total += season.matches
      }
    }
  }

  // Vypoƒç√≠tat v√°≈æenou √∫spƒõ≈°nost
  const weightedWinRate = calculateWeightedWinRate(player)

  if (weightedWinRate !== null) {
    const weightType = matches2025Total >= 10 ? '2:1 (‚â•10 z√°pas≈Ø v 2025)' : '1:1 (<10 z√°pas≈Ø v 2025)'
    console.log(`   V√°≈æen√° √∫spƒõ≈°nost: ${weightedWinRate.toFixed(1)}% (v√°ha ${weightType})`)
  }

  // Vypoƒç√≠tat z√°kladn√≠ rating na z√°kladƒõ v√°≈æen√© √∫spƒõ≈°nosti
  // NK Opava hraje v 1. lize -> z√°kladn√≠ rating 80
  let baseTargetAvg = calculateBaseRating(weightedWinRate, '1. liga')

  if (!weightedWinRate) {
    baseTargetAvg = oldAvg
  }

  console.log(`   Z√°kladn√≠ c√≠lov√Ω rating: ${baseTargetAvg.toFixed(1)} (liga t√Ωmu: 1. liga)`)

  // Z√≠skat pozice adjustmenty
  const adjustments = getPositionAdjustments(player.position)

  // Aplikovat pozice adjustmenty
  const newStats = {}
  const statKeys = Object.keys(player.stats)

  for (const key of statKeys) {
    newStats[key] = baseTargetAvg + (adjustments[key] || 0)
  }

  // ≈†k√°lovat tak, aby pr≈Ømƒõr sedƒõl
  let newAvg = Object.values(newStats).reduce((a, b) => a + b, 0) / 9
  const scale = baseTargetAvg / newAvg

  for (const key of statKeys) {
    newStats[key] = Math.round(newStats[key] * scale)
  }

  // APLIKOVAT TR√âNINKOV√ù BONUS
  const finalStats = applyTrainingBonus(newStats, player.trainingAttendance2025)

  // Aktualizovat hr√°ƒçe
  player.stats = finalStats

  const finalAvg = Object.values(finalStats).reduce((a, b) => a + b, 0) / 9
  const min = Math.min(...Object.values(finalStats))
  const max = Math.max(...Object.values(finalStats))

  const trainingBonus = player.trainingAttendance2025 ? (player.trainingAttendance2025 / 50) : 0

  console.log(`   ‚úì P≈ôepoƒçteno!`)
  console.log(`   Star√Ω pr≈Ømƒõr: ${oldAvg.toFixed(1)} ‚Üí Nov√Ω: ${finalAvg.toFixed(1)} (bonus +${trainingBonus.toFixed(1)})`)
  console.log(`   Min: ${min}, Max: ${max}, Rozd√≠l: ${max - min}`)

  recalculated++
}

console.log(`\n=== HOTOVO ===`)
console.log(`P≈ôepoƒçteno ${recalculated} hr√°ƒç≈Ø`)
console.log('\n=== NOV√â STATISTIKY PRO PLAYERDATA.JS ===\n')

players.forEach(p => {
  if (p.stats && p.position !== 'Tren√©r') {
    console.log(`${p.name}:`)
    console.log(JSON.stringify(p.stats, null, 2))
    console.log('')
  }
})
